% This file contains the par protocol as described in section 3.4 of
% S. Mauw and G.J. Veltink, editors, Algebraic Specification of Communication
% Protocols, Cambridge tracts in theoretical computer science 36, Cambridge
% University Press, Cambridge 1993.
%
% With two data elements, the generated transition system has 91 states.
%
% Note that the protocol is slightly different from the alternating bit protocol.
% Is is interesting to see the subtle, but definitive differences between the
% two implementations of the protocols, although the external behaviour is the
% same.
%
% Translated from muCRL, 30/12/2006, Jan Friso Groote

% Common data
sort D = struct ${data};

% For SWP, n is the size of the window.
% Buffer and SWP are branching bisimilar if the capacity=2*windowsize.
map  n: Pos;
eqn  n=${windowsize};

% Capacity. Only used for Buffer
map capacity: Pos;
eqn capacity=${capacity};

% Data specific for ABP and ABP BW
sort Error = struct e; % To allow comparison with ABP/ABP_BW

% Data specific for CABP and Par
sort error = struct ce | ae; % To allow comparison with CABP
     Frame = struct frame(getd : D, getb: Bool);
     ACK = struct ac;

% Data specific for Par
sort TimerSignal = struct st | ti | eto;

% Data specific for Onebit
sort FrameOB=struct frame(dat:D,bit1:Bool,bit2:Bool);
     Status=struct read?eq_read | choice?eq_choice | del?eq_del;

% Data specific for SWP
sort DBuf = List(D);
     BBuf = List(Bool);
map  empty: BBuf;
     insert: D#Nat#DBuf -> DBuf;
     insert: Bool#Nat#BBuf -> BBuf;
     nextempty_mod: Nat#BBuf#Nat#Pos -> Nat;
     q1,q2:DBuf;
var  d,d':D; i,j,m: Nat; q: DBuf; c,c':Bool; n':Pos; b:BBuf;
eqn  q1 = ${initialwindow};
     q2 = q1;
     empty = ${emptywindow};
     i == 0 -> insert(d,i,q) = d |> tail(q);
     i > 0 -> insert(d,i, d'|>q) = d' |> insert(d,Int2Nat(i-1),q);
     i == 0 -> insert(c,i,b) = c |> tail(b);
     i > 0 -> insert(c,i,c'|>b) = c' |> insert(c,Int2Nat(i-1),b);
     b.(i mod n') && m>0 ->
         nextempty_mod(i,b,m,n') = nextempty_mod((i+1) mod 2*n', b,Int2Nat(m-1),n');
     !(b.(i mod n') && m>0) ->
         nextempty_mod(i,b,m,n') =i mod 2*n';


%------------------------------  act   -----------------------------------

act   r1,s2 : D;
      c3,r3,s3,c4,s4,r4 : Frame;
      c5,r5,s5,c6,r6,s6 : ACK;
      c4,r4,s4,c6,r6,s6 : error;
      c7,r7,s7,c8,r8,s8,c9,r9,s9 : TimerSignal;
      skip;

%------------------------------  proc  -----------------------------------

proc  S = RM(false);
      RM(b:Bool) = sum d:D.r1(d).ST(frame(d,b));
      ST(f:Frame) = s7(st).SF(f);
      SF(f:Frame) = s3(f).RA(f);
      RA(f:Frame) = (r9(ti)+r6(ae)).ST(f)+r6(ac).RM(!getb(f));

      Ti  = r7(st).TR;
      TR = r7(st).TR+r8(eto).TE;
      TE = s9(ti).Ti;

      K  = sum f:Frame.r3(f).K1(f);
      K1(f:Frame) = (skip+skip.s4(ce)).K2 + skip.s4(f).K;
      K2 = s8(eto).K;

      R = RF(false);
      RF(b:Bool) = sum d:D.r4(frame(d,b)).SM(frame(d,b))
                     + sum d:D.r4(frame(d,!b)).SA(b)
                     + r4(ce).RF(b);
      SA(b:Bool) = s5(ac).RF(b);
      SM(f:Frame) = s2(getd(f)).SA(!getb(f));

      L = r5(ac).L1;
      L1 = ( skip.s6(ae) + skip.s6(ac) ). L + skip.L2;
      L2 = s8(eto).L;


init
  rename({r1->r, s2->s},
  hide({c3,c4,c5,c6,c7,c8,c9,skip},
    allow({r1,s2,c3,c4,c5,c6,c7,c8,c9,skip},
      comm({r3|s3->c3, r4|s4->c4, r5|s5->c5, r6|s6->c6,
                     r7|s7->c7, r8|s8->c8, r9|s9->c9},
               S || K || R || L || Ti ))));
