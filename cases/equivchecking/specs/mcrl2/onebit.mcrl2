% This file describes the onebit sliding window protocol as documented
% M.A. Bezem and J.F. Groote. A correctness proof of a one bit sliding
% window protocol in muCRL. The Computer Journal, 37(4): 289-307, 1994.
% This sliding window protocol is a bidirectional sliding window protocol
% with piggy backing, where the window sizes at the receiving and
% sending side have size 1. The behaviour of this sliding window protocol
% is that of two bidirectional buffers sending data from channel ra to
% sb, and from rc to sd. Both buffers have capacity 2.
%   The external behaviour of the onebit protocol is rather complex.
% However, making only the behaviour visible at gates ra and sb reduced
% modulo branching bisimulation clearly shows the behaviour of
% a buffer of capacity 2.
%
% Jan Friso Groote, translated from muCRL 30/12/2006
%
% For equivalence checking, we have extended the data specification to include
% all data for the other communication protocols as well.

% Common data
sort D = struct ${data};

% For SWP, n is the size of the window.
% Buffer and SWP are branching bisimilar if the capacity=2*windowsize.
map  n: Pos;
eqn  n=${windowsize};

% Capacity. Only used for Buffer
map capacity: Pos;
eqn capacity=${capacity};

% Data specific for ABP and ABP BW
sort Error = struct e; % To allow comparison with ABP/ABP_BW

% Data specific for CABP and Par
sort error = struct ce | ae; % To allow comparison with CABP
     Frame = struct frame(getd : D, getb: Bool);
     ACK = struct ac;

% Data specific for Par
sort TimerSignal = struct st | ti | eto;

% Data specific for Onebit
sort FrameOB=struct frame(dat:D,bit1:Bool,bit2:Bool);
     Status=struct read?eq_read | choice?eq_choice | del?eq_del;

% Data specific for SWP
sort DBuf = List(D);
     BBuf = List(Bool);
map  empty: BBuf;
     insert: D#Nat#DBuf -> DBuf;
     insert: Bool#Nat#BBuf -> BBuf;
     nextempty_mod: Nat#BBuf#Nat#Pos -> Nat;
     q1,q2:DBuf;
var  d,d':D; i,j,m: Nat; q: DBuf; c,c':Bool; n':Pos; b:BBuf;
eqn  q1 = ${initialwindow};
     q2 = q1;
     empty = ${emptywindow};
     i == 0 -> insert(d,i,q) = d |> tail(q);
     i > 0 -> insert(d,i, d'|>q) = d' |> insert(d,Int2Nat(i-1),q);
     i == 0 -> insert(c,i,b) = c |> tail(b);
     i > 0 -> insert(c,i,c'|>b) = c' |> insert(c,Int2Nat(i-1),b);
     b.(i mod n') && m>0 ->
         nextempty_mod(i,b,m,n') = nextempty_mod((i+1) mod 2*n', b,Int2Nat(m-1),n');
     !(b.(i mod n') && m>0) ->
         nextempty_mod(i,b,m,n') =i mod 2*n';

act  ra,sb,rc,sd:D;
     rcl,scl,i_del,i_lost,ccl;
     r,s,c,s2,r2,c2,s4,r4,c4:FrameOB;

proc S(ready:Bool,rec:Bool,sts:Bool,d:D,e:D,p:Bool,q:Bool)=
       ready -> sum d:D.ra(d).S(false,rec,false,d,e,!p,q) +
       !rec -> sb(e).S(ready,true,sts,d,e,p,q) +
       rcl.S(ready,rec,false,d,e,p,q)+
       sum f:D,b1:Bool,b2:Bool.
           r4(frame(f,b1,b2)).
              (rec && b1==!q) -> S(b2==p,false,sts,d,f,p,!q)
                                  <> S(b2==p,rec,sts,d,e,p,q) +
       !sts -> s(frame(d,p,q)).S(ready,rec,true,d,e,p,q) +
       delta;

proc Tim= scl.Tim;

proc C(f:FrameOB,st:Status)=
       eq_read(st) -> sum f:FrameOB.r(f).C(f,choice)<>delta+
       eq_choice(st) -> (i_del.C(f,del)+i_lost.C(f,read))<>delta+
       eq_del(st) -> s2(f).C(f,read)<>delta ;

init rename({ra->r, sb->s},
      hide ({c, ccl, c2, c4, i_del, i_lost, rc, sd},
       allow({c,ccl,c2,c4,i_del,i_lost,ra,sb,rc,sd},
         comm({r2|s2->c2,r4|s4->c4},
           rename({sb->sd},
             allow({c,ccl,ra,sb,s2,r4,i_del,i_lost},
               comm({rcl|scl->ccl,r|s->c},
                 S(true,true,true,d1,d1,false,false)||
                 Tim||
                 C(frame(d1,false,false),read))))||
           rename({ra->rc,s2->s4,r4->r2},
             allow({c,ccl,ra,sb,s2,r4,i_del,i_lost},
               comm({rcl|scl->ccl,r|s->c},
                 S(true,true,true,d1,d1,false,false)||
                 Tim||
                 C(frame(d1,false,false) ,read))))))));

