% TEMPLATE, need to stack data.txt with specification of D on top

% This file contains the alternating bit protocol, as described in W.J. 
% Fokkink, J.F. Groote and M.A. Reniers, Modelling Reactive Systems.
%
% The only exception is that the domain D consists of two data elements to
% facilitate simulation.

% note: renamed r1->r, s4->s to make all communication protocols consistent
% w.r.t. external behaviour

% Common data
sort D = struct ${data};

% For SWP, n is the size of the window.
% Buffer and SWP are branching bisimilar if the capacity=2*windowsize.
map  n: Pos;
eqn  n=${windowsize};

% Capacity. Only used for Buffer
map capacity: Pos;
eqn capacity=${capacity};

% Data specific for ABP and ABP BW
sort Error = struct e; % To allow comparison with ABP/ABP_BW

% Data specific for CABP and Par
sort error = struct ce | ae; % To allow comparison with CABP
     Frame = struct frame(getd : D, getb: Bool);
     ACK = struct ac;

% Data specific for Par
sort TimerSignal = struct st | ti | eto;

% Data specific for Onebit
sort FrameOB=struct frame(dat:D,bit1:Bool,bit2:Bool);
     Status=struct read?eq_read | choice?eq_choice | del?eq_del;

% Data specific for SWP
sort DBuf = List(D);
     BBuf = List(Bool);
map  empty: BBuf;
     insert: D#Nat#DBuf -> DBuf;
     insert: Bool#Nat#BBuf -> BBuf;
     nextempty_mod: Nat#BBuf#Nat#Pos -> Nat;
     q1,q2:DBuf;
var  d,d':D; i,j,m: Nat; q: DBuf; c,c':Bool; n':Pos; b:BBuf;
eqn  q1 = ${initialwindow};
     q2 = q1;
     empty = ${emptywindow};
     i == 0 -> insert(d,i,q) = d |> tail(q);
     i > 0 -> insert(d,i, d'|>q) = d' |> insert(d,Int2Nat(i-1),q);
     i == 0 -> insert(c,i,b) = c |> tail(b);
     i > 0 -> insert(c,i,c'|>b) = c' |> insert(c,Int2Nat(i-1),b);
     b.(i mod n') && m>0 ->
         nextempty_mod(i,b,m,n') = nextempty_mod((i+1) mod 2*n', b,Int2Nat(m-1),n');
     !(b.(i mod n') && m>0) ->
         nextempty_mod(i,b,m,n') =i mod 2*n';


act
  r,s: D;
  s2,r2,c2: D # Bool;
  s3,r3,c3: D # Bool;
  s3,r3,c3: Error;
  s5,r5,c5: Bool;
  s6,r6,c6: Bool;
  s6,r6,c6: Error;
  i;

proc
  S(b:Bool)     = sum d:D. r(d).T(d,b);
  T(d:D,b:Bool) = s2(d,b).(r6(b).S(!b)+(r6(!b)+r6(e)).T(d,b));

  R(b:Bool)     = sum d:D. r3(d,b).s(d).s5(b).R(!b)+ 
                  (sum d:D.r3(d,!b)+r3(e)).s5(!b).R(b);

  K             = sum d:D,b:Bool. r2(d,b).(i.s3(d,b)+i.s3(e)).K;

  L             = sum b:Bool. r5(b).(i.s6(b)+i.s6(e)).L;

init
  hide({c2,c3,c5,c6,i},
    allow({r,s,c2,c3,c5,c6,i},
      comm({r2|s2->c2, r3|s3->c3, r5|s5->c5, r6|s6->c6},
          S(true) || K || L || R(true)
      )
    )
  );
