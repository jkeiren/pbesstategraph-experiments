% TEMPLATE
%
% This file contains the alternating bit protocol, as described in J.C.M.
% Baeten and W.P. Weijland, Process Algebra, Cambridge Tracts in Theoretical
% Computer Science 18, Cambridge University Press, 1990.
%
% We modified the description to use Bool instead of Bit, with b0=false, b1=true.

% Common data
sort D = struct ${data};

% Data specific for ABP and ABP BW
sort Error = struct e;

act
  r1,s4,r,s: D;
  s2,r2,c2: D # Bool;
  s3,r3,c3: D # Bool;
  s3,r3,c3: Error;
  s5,r5,c5: Bool;
  s6,r6,c6: Bool;
  s6,r6,c6: Error;
  tau_s3db,tau_s3e,tau_s6b,tau_s6e;

proc
  S            = S(false).S(true).S;
  S(b:Bool)     = sum d:D. r1(d).S(d,b);
  S(d:D,b:Bool) = s2(d,b).((r6(!b)+r6(e)).S(d,b)+r6(b));

  R            = R(true).R(false).R;
  R(b:Bool)     = (sum d:D. r3(d,b) + r3(e)).s5(b).R(b) +
                 sum d:D. r3(d,!b).s4(d).s5(!b);

  K            = sum d:D,b:Bool. r2(d,b).(tau_s3db.s3(d,b)+tau_s3e.s3(e)).K;

  L            = sum b:Bool. r5(b).(tau_s6b.s6(b)+tau_s6e.s6(e)).L;

init
  allow({r1,s4,tau_s3db, tau_s3e, tau_s6b, tau_s6e,c2,c3,c5,c6},
    comm({r2|s2->c2, r3|s3->c3, r5|s5->c5, r6|s6->c6},
        S || K || L || R
    )
  );
